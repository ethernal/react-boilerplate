const isDevelopment = process.env.NODE_ENV !== "production";

const path               = require("path");
const webpack            = require("webpack");
const CleanWebpackPlugin = require("clean-webpack-plugin");
const CopyWebpackPlugin  = require("copy-webpack-plugin");
const StyleLintPlugin    = require("stylelint-webpack-plugin");

const webpack_rules   = [];
const webpack_plugins = [];

const webpackOption = {
    resolve: {
        extensions: [".js", ".json", ".ts", ".jsx", ".tsx"]
    },
    mode: isDevelopment ? "development": "production",

    entry: "./src/index.tsx",

    devtool: "cheap-module-eval-source-map",
    output : {
        path    : path.resolve(__dirname, "dist"),
        filename: "bundle.js"
    },
    module: {
        rules: webpack_rules
    },
    plugins: webpack_plugins
};
let babelLoader = {
    test   : /\.+(js|ts|tsx|jsx)$/,
    exclude: /(node_modules|bower_components)/,
    use    : {
        loader: "babel-loader"
    }
};

let sassToStyleLoader = {
    test   : /\.scss$/,
    exclude: /(node_modules)/,
    loader : "style-loader",
    options: {
        sourceMap: true,
        hmr      : true
    },
    use: [
        "style-loader", // creates style nodes from JS strings
        "css-loader", // translates CSS into CommonJS
        "sass-loader" // compiles Sass to CSS, using Node Sass by default
    ]
};

let StyleLintOptions = {};
let stylelint        = new StyleLintPlugin(StyleLintOptions);

let copyIndexStaticFile = new CopyWebpackPlugin([
    { from: "./src/index.html", to: "./" }
]);

webpack_rules.push(babelLoader);
webpack_rules.push(sassToStyleLoader);

webpack_plugins.push(copyIndexStaticFile);
webpack_plugins.push(stylelint);

module.exports = webpackOption;
